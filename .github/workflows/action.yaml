name: Build and push Docker image to dockerhub and deploy to EKS

on:
  push:
    branches: [ "main" ]
    
jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - name: Check out the repo
      uses: actions/checkout@v4

    - name: Login to dockerhub
      uses: docker/login-action@v3
      with:
       username: ${{ secrets.DOCKERHUB_USERNAME }}
       password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push to dockerhub
      uses: docker/build-push-action@v5
      with:
        context: ./flask-demo-app
        file: ./flask-demo-app/Dockerfile
        push: true
        tags: avivdani/flask-demo:latest
      
    - name: AWS Login
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names ${{ secrets.ECR_REPOSITORY }} --region ${{ secrets.AWS_REGION }} || \
        aws ecr create-repository --repository-name ${{ secrets.ECR_REPOSITORY }} --region ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build the Docker image
        docker build -t ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG ./flask-demo-app
        docker tag ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
        docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
      
    - name: Output image URI
      run: |
        echo "Built and pushed image: ${{ steps.build.outputs.image }}"

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Ensure S3 bucket exists for Terraform state
      run: |
        aws s3api head-bucket --bucket terraform-state-eks-cluster-1 2>/dev/null || \
        aws s3api create-bucket --bucket terraform-state-eks-cluster-1 --region eu-north-1 --create-bucket-configuration LocationConstraint=eu-north-1
    - name: terraform init
      uses: hashicorp/terraform-action@v4
      with:
        command: init
        arguments: -backend-config="bucket=terraform-state-eks-cluster-1" -backend-config="key=eks-cluster/terraform.tfstate" -backend-config="region=eu-north-1"
        working-directory: ./terraform
    - name: terraform plan
      uses: hashicorp/terraform-action@v4
      with:
        command: plan
        arguments: -var-file=variables.tf
        working-directory: ./terraform
    - name: terraform apply
      uses: hashicorp/terraform-action@v4
      with:
        command: apply
        arguments: -var-file=variables.tf
        working-directory: ./terraform
    - name: Update kubeconfig for EKS
      run: |
        aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name eks-cluster
    - name: Deploy to Kubernetes
      uses: helm/helm-action@v3
      with:
        action: upgrade
        name: flask-demo
        chart: ./flask-demo
        install: true
    - name: Show Helm release status
      run: helm status flask-demo
    - name: Show Terraform outputs
      run: terraform output
      working-directory: ./terraform